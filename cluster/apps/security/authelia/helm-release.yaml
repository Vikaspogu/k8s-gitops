---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authelia
  namespace: security
spec:
  interval: 15m
  chart:
    spec:
      # renovate: registryUrl=https://charts.authelia.com
      chart: authelia
      version: 0.8.49
      sourceRef:
        kind: HelmRepository
        name: authelia-charts
        namespace: flux-system
      interval: 15m
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  dependsOn:
    - name: postgresql-kube
      namespace: data
    - name: redis
      namespace: data
  values:
    domain: ${SECRET_DOMAIN}
    service:
      annotations:
        prometheus.io/probe: "true"
        prometheus.io/protocol: "http"
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-production"
        external-dns/is-public: "true"
        external-dns.home.arpa/enabled: "true"
        hajimari.io/enable: "true"
        hajimari.io/appName: "Authelia"
        hajimari.io/icon: shield-account
      subdomain: auth
      tls:
        enabled: true
        secret: authelia-tls
    pod:
      kind: Deployment
      replicas: 3
      env:
        - name: TZ
          value: ${TIMEZONE}
      extraVolumeMounts:
        - name: config-custom
          mountPath: /config
      extraVolumes:
        - name: config-custom
          configMap:
            name: authelia-config-custom
            items:
              - key: users_database.yml
                path: users_database.yml
      resources:
        requests:
          cpu: 500m
          memory: 1500Mi
        limits: {}
    ##
    ## Authelia Config Map Generator
    ##
    configMap:
      enabled: true
      server:
        read_buffer_size: 8192
        write_buffer_size: 8192
      theme: dark
      authentication_backend:
        disable_reset_password: true
        ldap:
          enabled: false
        file:
          enabled: true
          password:
            algorithm: argon2id
      access_control:
        ## data policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'. It is the policy applied to any
        ## resource if there is no policy to be applied to the user.
        data_policy: deny
        networks:
          - name: private
            networks:
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
          - name: vpn
            networks:
              - 10.10.0.0/16
        rules:
          # bypass Authelia WAN + LAN
          - domain:
              - auth.${SECRET_DOMAIN}
            policy: bypass
          # One factor auth for LAN
          - domain:
              - "*.${SECRET_DOMAIN}"
            policy: one_factor
            subject: ["group:admins", "group:users"]
            networks:
              - private
          # Two factors auth for WAN
          - domain:
              - "*.${SECRET_DOMAIN}"
            subject: ["group:admins", "group:users"]
            policy: two_factor
      identity_providers:
        oidc:
          enabled: true
          cors:
            endpoints: ["authorization", "token", "revocation", "introspection"]
            allowed_origins_from_client_redirect_uris: true
          clients:
            - id: outline
              description: Outline
              secret: "${SECRET_OUTLINE_OAUTH_CLIENT_SECRET}"
              public: false
              authorization_policy: two_factor
              pre_configured_consent_duration: 1y
              scopes: ["openid", "profile", "email", "offline_access"]
              redirect_uris: ["https://docs.${SECRET_DOMAIN}/auth/oidc.callback"]
              userinfo_signing_algorithm: none
      session:
        redis:
          high_availability:
            enabled: true
            sentinel_name: redis-master
            nodes:
              - host: redis-node-0.redis-headless.data.svc.cluster.local
                port: 26379
              - host: redis-node-1.redis-headless.data.svc.cluster.local
                port: 26379
              - host: redis-node-2.redis-headless.data.svc.cluster.local
                port: 26379
      storage:
        postgres:
          enabled: true
          host: postgresql-kube.data.svc.cluster.local
      notifier:
        smtp:
          enabled: true
          enabledSecret: true
          host: "smtp.sendgrid.net"
          port: 587
          username: "apikey"
          sender: "no-reply@${SECRET_DOMAIN}"
          identifier: ${SECRET_DOMAIN}
    secret:
      storage:
        key: STORAGE_PASSWORD
        value: "${SECRET_AUTHELIA_POSTGRES_PASSWORD}"
        filename: STORAGE_PASSWORD
      jwt:
        key: JWT_TOKEN
        value: "${SECRET_AUTHELIA_JWT_SECRET}"
        filename: JWT_TOKEN
      redis:
        key: REDIS_PASSWORD
        value: "${SECRET_REDIS_PASSWORD}"
        filename: REDIS_PASSWORD
      smtp:
        key: SMTP_PASSWORD
        value: "${SECRET_SENDGRID_API_KEY}"
        filename: SMTP_PASSWORD
      storageEncryptionKey:
        key: STORAGE_ENCRYPTION_KEY
        value: "${SECRET_AUTHELIA_STORAGE_ENCRYPTION_KEY}"
        filename: STORAGE_ENCRYPTION_KEY
      oidcPrivateKey:
        key: OIDC_PRIVATE_KEY
        value: |+
          '${OIDC_PRIVATE_KEY}'
        filename: OIDC_PRIVATE_KEY
      oidcHMACSecret:
        key: OIDC_HMAC_SECRET
        value: "${OIDC_HMAC_SECRET}"
        filename: OIDC_HMAC_SECRET
  postRenderers:
    - kustomize:
        patchesJson6902:
          - target:
              kind: Ingress
              name: authelia
            patch:
              - op: add
                path: /spec/ingressClassName
                value: nginx
