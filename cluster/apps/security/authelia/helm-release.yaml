---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authelia
  namespace: security
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.authelia.com
      chart: authelia
      version: 0.8.3
      sourceRef:
        kind: HelmRepository
        name: authelia-charts
        namespace: flux-system
      interval: 5m
  values:
    domain: ${SECRET_DOMAIN}
    service:
      annotations:
        prometheus.io/probe: "true"
        prometheus.io/protocol: "http"
    ingress:
      main:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: "traefik"
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          external-dns/is-public: "true"
          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
          hajimari.io/enable: "true"
          hajimari.io/icon: "lock"
          hajimari.io/appName: "Authelia"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - host: "authelia.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - secretName: authelia-tls-secret
            hosts:
              - "authelia.${SECRET_DOMAIN}"
    pod:
      # Must be Deployment, DaemonSet, or StatefulSet.
      kind: Deployment
      env:
        - name: TZ
          value: America/Chicago
      extraVolumeMounts:
        - name: config-custom
          mountPath: /config
      extraVolumes:
        - name: config-custom
          configMap:
            name: authelia-config-custom
            items:
              - key: users_database.yml
                path: users_database.yml
      resources:
        requests:
          cpu: 500m
          memory: 1500Mi
        limits: {}
    ##
    ## Authelia Config Map Generator
    ##
    configMap:
      enabled: true
      server:
        read_buffer_size: 8192
        write_buffer_size: 8192
      theme: dark
      authentication_backend:
        disable_reset_password: true
        ldap:
          enabled: false
        file:
          enabled: true
          password:
            algorithm: argon2id
      access_control:
        ## Default policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'. It is the policy applied to any
        ## resource if there is no policy to be applied to the user.
        default_policy: deny
        networks:
          - name: private
            networks:
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
          - name: vpn
            networks:
              - 10.10.0.0/16
        rules:
          # bypass Authelia WAN + LAN
          - domain:
              - login.${SECRET_DOMAIN}
            policy: bypass
          # Deny admin services to users
          - domain:
              - alert-manager.${SECRET_DOMAIN}
              - prometheus.${SECRET_DOMAIN}
              - thanos.${SECRET_DOMAIN}
            subject: ["group:users"]
            policy: deny
          # One factor auth for LAN
          - domain:
              - "*.${SECRET_DOMAIN}"
            policy: one_factor
            subject: ["group:admins", "group:users"]
            networks:
              - private
          # Two factors auth for WAN
          - domain:
              - "*.${SECRET_DOMAIN}"
            subject: ["group:admins", "group:users"]
            policy: two_factor
      session:
        redis:
          enabled: true
          enabledSecret: true
          host: redis-master.data.svc.cluster.local
      storage:
        postgres:
          enabled: true
          host: postgresql-kube.data.svc.cluster.local
      notifier:
        smtp:
          enabled: true
          enabledSecret: true
          host: "smtp.sendgrid.net"
          port: 587
          username: "apikey"
          sender: "no-reply@${SECRET_DOMAIN}"
          identifier: ${SECRET_DOMAIN}
    secret:
      storage:
        key: STORAGE_PASSWORD
        value: "${SECRET_POSTGRESQL_PASSWORD}"
        filename: STORAGE_PASSWORD
      jwt:
        key: JWT_TOKEN
        value: "${SECRET_AUTHELIA_JWT_SECRET}"
        filename: JWT_TOKEN
      redis:
        key: REDIS_PASSWORD
        value: "${SECRET_REDIS_PASSWORD}"
        filename: REDIS_PASSWORD
      smtp:
        key: SMTP_PASSWORD
        value: "${SECRET_SENDGRID_API_KEY}"
        filename: SMTP_PASSWORD
      storageEncryptionKey:
        key: STORAGE_ENCRYPTION_KEY
        value: "${SECRET_AUTHELIA_STORAGE_ENCRYPTION_KEY}"
        filename: STORAGE_ENCRYPTION_KEY
