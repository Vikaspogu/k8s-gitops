{
  enabled: true,
  timezone: "America/Chicago",
  semanticCommits: "enabled",
  dependencyDashboard: true,
  dependencyDashboardTitle: "Renovate Dashboard ðŸ¤–",
  commitBody: "Signed-off-by: Vikas Pogu <vikaspogu@users.noreply.github.com>",
  suppressNotifications: ["prIgnoreNotification"],
  rebaseWhen: "conflicted",
  commitMessageTopic: "{{depName}}",
  commitMessageExtra: "to {{newVersion}}",
  commitMessageSuffix: "",
  assignees: ["@vikaspogu"],
  // set up ignored deps
  ignoreDeps: [
    "ghcr.io/fluxcd/helm-controller",
    "ghcr.io/fluxcd/image-automation-controller",
    "ghcr.io/fluxcd/image-reflector-controller",
    "ghcr.io/fluxcd/kustomize-controller",
    "ghcr.io/fluxcd/notification-controller",
    "ghcr.io/fluxcd/source-controller",
  ],
  "flux": {
    "fileMatch": ["cluster/.+\\.ya?ml$"]
  },
  "helm-values": {
    "fileMatch": ["cluster/.+\\.ya?ml$"]
  },
  "kubernetes": {
    "fileMatch": ["cluster/.+\\.ya?ml$"]
  },
  regexManagers: [
    {
      "description": "Process CRD dependencies",
      "fileMatch": ["cluster/.+\\.ya?ml$"],
      "matchStrings": [
        // GitRepository where 'Git release/tag' matches 'Helm' version
        "registryUrl=(?<registryUrl>\\S+) chart=(?<depName>\\S+)\n.*?(?<currentValue>[^-\\s]*)\n",
        // Kustomization where 'GitHub release artifact URL' matches 'Docker image' version
        "datasource=(?<datasource>\\S+) image=(?<depName>\\S+)\n.*?-\\s(.*?)\/(?<currentValue>[^/]+)\/[^/]+\n"
      ],
      "datasourceTemplate": "{{#if datasource}}{{{datasource}}}{{else}}helm{{/if}}"
    },
    {
      "description": "Process various dependencies",
      "fileMatch": [
        "ansible/.+\\.ya?ml$",
        "cluster/.+\\.ya?ml$"
      ],
      "matchStrings": [
        "datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)( versioning=(?<versioning>\\S+))?\n.*?\"(?<currentValue>.*)\"\n"
      ],
      "datasourceTemplate": "{{#if datasource}}{{{datasource}}}{{else}}github-releases{{/if}}",
      "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}"
    },
    {
      "description": "Process raw GitHub URLs",
      "fileMatch": ["cluster/.+\\.ya?ml$"],
      "matchStrings": [
        "https:\\/\\/raw.githubusercontent.com\\/(?<depName>[\\w\\d\\-_]+\\/[\\w\\d\\-_]+)\\/(?<currentValue>[\\w\\d\\.\\-_]+)\\/.*"
      ],
      "datasourceTemplate": "github-releases",
      "versioningTemplate": "semver"
    }
  ],
  packageRules: [
    // Setup labels
    {
      "matchUpdateTypes": ["major"],
      "labels": ["type/major"]
    },
    {
      "matchUpdateTypes": ["minor"],
      "labels": ["type/minor"]
    },
    {
      "matchUpdateTypes": ["patch"],
      "labels": ["type/patch"]
    },
    {
      "matchDatasources": ["docker"],
      "addLabels": ["renovate/container"]
    },
    {
      "matchDatasources": ["helm"],
      "addLabels": ["renovate/helm"]
    },
    {
      "matchDatasources": ["galaxy", "galaxy-collection"],
      "addLabels": ["renovate/ansible"]
    },
    {
      "matchDatasources": ["terraform-provider"],
      "addLabels": ["renovate/terraform"]
    },
    {
      "matchDatasources": ["github-releases", "github-tags"],
      "addLabels": ["renovate/github-release"]
    },
    {
      "matchManagers": ["github-actions"],
      "addLabels": ["renovate/github-action"]
    },
    {
      "matchDatasources": ["pypi"],
      "addLabels": ["renovate/pip"]
    },
    // Custom versions
    {
      matchDatasources: ["docker"],
      versioning: "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-(?<compatibility>.*)$",
      matchPackageNames: ["blakeblackshear/frigate"],
    },
    {
      datasources: ["docker"],
      versionScheme: "regex:^nightly-version-4\\.(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$",
      packageNames: ["linuxserver/radarr"],
    },
    {
      datasources: ["docker"],
      versionScheme: "regex:^develop-version-3\\.(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$",
      packageNames: ["linuxserver/sonarr"],
    },
    // Pin package versions
    {
      matchDatasources: ["docker"],
      allowedVersions: "<13",
      matchPackageNames: ["postgres"],
    },
    {
      matchDatasources: ["docker", "github-releases"],
      versioning: "loose",
      matchPackageNames: [
        "plexinc/pms-docker",
        "ghcr.io/k8s-at-home/qbittorrent",
      ],
    },
    // Enable auto-merge
    {
      datasources: ["docker"],
      automerge: true,
      requiredStatusChecks: null,
      updateTypes: ["minor", "patch"],
      packageNames: [
        "linuxserver/sonarr",
        "linuxserver/radarr",
        "plexinc/pms-docker",
        "ghcr.io/k8s-at-home/readarr-nightly",
        "ghcr.io/k8s-at-home/jackett",
      ],
    },
    // group packages
    {
      "description": "Cert-Manager image (for CRDs) and chart",
      "groupName": "Cert-Manager",
      "matchPackagePatterns": ["cert-manager"],
      "matchDatasources": ["docker", "helm"],
      "group": { "commitMessageTopic": "{{{groupName}}} group" },
      "separateMinorPatch": true
    },
    {
      "description": "External Snapshotter kustomization (for CRDs) and chart",
      "groupName": "External Snapshotter",
      "matchPackagePatterns": ["external-snapshotter", "snapshot-controller"],
      "matchDatasources": ["docker", "github-tags"],
      "group": { "commitMessageTopic": "{{{groupName}}} group" },
      "separateMinorPatch": true
    },
    {
      "description": "Node Feature Discovery kustomization (for CRDs) and chart",
      "groupName": "Node Feature Discovery",
      "matchPackagePatterns": ["node-feature-discovery"],
      "matchDatasources": ["helm", "github-tags"],
      "group": { "commitMessageTopic": "{{{groupName}}} group" },
      "separateMinorPatch": true
    },
    {
      "description": "Rook-Ceph image and chart",
      "groupName": "Rook-Ceph",
      "matchPackagePatterns": ["rook.ceph"],
      "matchDatasources": ["docker", "helm"],
      "group": { "commitMessageTopic": "{{{groupName}}} group" },
      "separateMinorPatch": true
    },
    //semanticCommits
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(container)!: "
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "semanticCommitScope": "container"
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["digest", "patch"],
      "semanticCommitType": "fix",
      "semanticCommitScope": "container"
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(helm)!: "
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "semanticCommitScope": "helm"
    },

    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "semanticCommitScope": "helm"
    },
    {
      "matchDatasources": ["galaxy", "galaxy-collection"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(ansible)!: "
    },
    {
      "matchDatasources": ["galaxy", "galaxy-collection"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "semanticCommitScope": "ansible"
    },

    {
      "matchDatasources": ["galaxy", "galaxy-collection"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "semanticCommitScope": "ansible"
    },
    {
      "matchDatasources": ["terraform-provider"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(terraform)!: "
    },
    {
      "matchDatasources": ["terraform-provider"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "semanticCommitScope": "terraform"
    },
    {
      "matchDatasources": ["terraform-provider"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "semanticCommitScope": "terraform"
    },
    {
      "matchDatasources": ["github-releases", "github-tags"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(github-release)!: "
    },
    {
      "matchDatasources": ["github-releases", "github-tags"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "semanticCommitScope": "github-release"
    },
    {
      "matchDatasources": ["github-releases", "github-tags"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "semanticCommitScope": "github-release"
    },
    {
      "matchManagers": ["github-actions"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(github-action)!: "
    },
    {
      "matchManagers": ["github-actions"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "semanticCommitScope": "github-action"
    },
    {
      "matchManagers": ["github-actions"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "semanticCommitScope": "github-action"
    },
    {
      "matchDatasources": ["pypi"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(pip)!: "
    },
    {
      "matchDatasources": ["pypi"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "semanticCommitScope": "pip"
    },
    {
      "matchDatasources": ["pypi"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "semanticCommitScope": "pip"
    }
  ],
}
