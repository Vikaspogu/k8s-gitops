---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authelia
  namespace: default
spec:
  interval: 15m
  chart:
    spec:
      # renovate: registryUrl=https://charts.authelia.com
      chart: authelia
      version: 0.8.58
      sourceRef:
        kind: HelmRepository
        name: authelia
        namespace: flux-system
      interval: 15m
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    domain: ${SECRET_DOMAIN}
    service:
      annotations:
        prometheus.io/probe: "true"
        prometheus.io/protocol: "http"
    ingress:
      enabled: true
      annotations:
        external-dns/is-public: "true"
        external-dns.alpha.kubernetes.io/target: ingress.${SECRET_DOMAIN}
        hajimari.io/enable: "true"
        hajimari.io/appName: "Authelia"
        hajimari.io/icon: shield-account
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: Ingress
        gethomepage.dev/icon: mdi-shield-account
      subdomain: auth
      tls:
        enabled: true
    pod:
      kind: Deployment
      replicas: 2
      annotations:
        reloader.stakater.com/auto: "true"
      env:
        - name: TZ
          value: ${TIMEZONE}
      extraVolumeMounts:
        - name: config-custom
          mountPath: /config
      extraVolumes:
        - name: config-custom
          secret:
            secretName: authelia
            items:
              - key: users_database.yml
                path: users_database.yml
      resources:
        requests:
          cpu: 5m
          memory: 10Mi
        limits:
          memory: 250Mi
    configMap:
      enabled: true
      server:
        read_buffer_size: 8192
        write_buffer_size: 8192
      theme: dark
      authentication_backend:
        disable_reset_password: true
        ldap:
          enabled: true
          implementation: custom
          url: ldap://lldap.default.svc.cluster.local:389
          base_dn: dc=home,dc=arpa
          username_attribute: "uid"
          users_filter: "(&({username_attribute}={input})(objectClass=person))"
          additional_users_dn: ou=people
          additional_groups_dn: ou=groups
          groups_filter: "(member={dn})"
          group_name_attribute: cn
          mail_attribute: mail
          display_name_attribute: displayName
          user: uid=admin,ou=people,dc=home,dc=arpa
        file:
          enabled: false
          password:
            algorithm: argon2id
      access_control:
        default_policy: two_factor
        networks:
          - name: internal
            networks: ["10.0.0.0/8", "172.16.0.0/12", "10.30.0.0/16"]
          - name: vpn
            networks: ["10.0.0.0/24"]
        rules:
          - domain:
              - "*.${SECRET_DOMAIN}"
            policy: one_factor
            subject: ["group:admins", "group:users"]
            networks: ["internal", "vpn"]
          - domain:
              - "*.${SECRET_DOMAIN}"
            subject: ["group:admins", "group:users"]
            policy: two_factor
      identity_providers:
        oidc:
          enabled: true
          cors:
            endpoints: ["authorization", "token", "revocation", "introspection"]
            allowed_origins_from_client_redirect_uris: true
          clients:
            - id: grafana
              description: Grafana
              secret: "${GRAFANA_OAUTH_CLIENT_SECRET}"
              public: false
              authorization_policy: two_factor
              pre_configured_consent_duration: 1y
              scopes: ["openid", "profile", "groups", "email"]
              redirect_uris: ["https://grafana.${SECRET_DOMAIN}/login/generic_oauth"]
              userinfo_signing_algorithm: none
            - id: miniflux
              description: Miniflux
              secret: "${MINIFLUX_OAUTH_CLIENT_SECRET}"
              public: false
              authorization_policy: two_factor
              pre_configured_consent_duration: 1y
              scopes: ["openid", "profile", "groups", "email"]
              redirect_uris: ["https://miniflux.${SECRET_DOMAIN}/oauth2/oidc/callback"]
              userinfo_signing_algorithm: none
      session:
        redis:
          high_availability:
            enabled: true
            sentinel_name: redis-master
            nodes:
              - host: redis-node-0.redis-headless.database.svc.cluster.local
                port: 26379
              - host: redis-node-1.redis-headless.database.svc.cluster.local
                port: 26379
              - host: redis-node-2.redis-headless.database.svc.cluster.local
                port: 26379
      storage:
        postgres:
          enabled: true
          host: postgres-rw.database.svc.cluster.local
      notifier:
        smtp:
          enabled: true
          enabledSecret: true
          host: "smtp.sendgrid.net"
          port: 587
          username: "apikey"
          sender: "no-reply@${SECRET_DOMAIN}"
          identifier: ${SECRET_DOMAIN}
    secret:
      existingSecret: authelia
  postRenderers:
    - kustomize:
        patchesJson6902:
          - target:
              kind: Ingress
              name: authelia
            patch:
              - op: add
                path: /spec/ingressClassName
                value: nginx
